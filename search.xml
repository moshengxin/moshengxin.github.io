<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA判断某天是周几</title>
    <url>/2020/07/31/JAVA%E5%88%A4%E6%96%AD%E6%9F%90%E5%A4%A9%E6%98%AF%E5%91%A8%E5%87%A0/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="java判断周六周日，周一到周五"><a href="#java判断周六周日，周一到周五" class="headerlink" title="java判断周六周日，周一到周五"></a>java判断周六周日，周一到周五</h2><p>这里利用到了Calendar类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        String Date &#x3D; &quot;2020-08-03&quot;;  &#x2F;&#x2F;定义初始是周一</span><br><span class="line">        Date testdate &#x3D; sdf.parse(Date);</span><br><span class="line">        Calendar cal &#x3D; Calendar.getInstance();</span><br><span class="line">        cal.setTime(testdate); </span><br><span class="line">       if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.MONDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周一&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">        &#x2F;&#x2F;日期加一天</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.TUESDAY) &#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周二&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.WEDNESDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周三&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.THURSDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周四&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.FRIDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周五&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.SATURDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周六&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.SUNDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周日&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>结果打印：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-08-03&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周一&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-04&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周二&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-05&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周三&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-06&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周四&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-07&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周五&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-08&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周六&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-09&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周日&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">记录代码，记录工作，记录自己。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Calendar Calendar类计算日期 判断周一到周日</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Ping测试两个IP网络之间的连通性</title>
    <url>/2020/09/27/Ping%E6%B5%8B%E8%AF%95%E4%B8%A4%E4%B8%AAIP%E7%BD%91%E7%BB%9C%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="使用ping或者telnet命令"><a href="#使用ping或者telnet命令" class="headerlink" title="使用ping或者telnet命令"></a>使用ping或者telnet命令</h2><p>1、ping和telnet命令作用类似，都是来测试网络的连通性,一般用ping就可以了</p>
<p>2、ping命令写法/格式：ping+ip/domain(ip也可以是本机ip，domain为域名，例如<a href="http://www.baidu.com/">www.baidu.com</a>)</p>
<p>3、ping命令会发送四次数据包，看到“已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)”代表能连通</p>
<p>4、telnet命令写法/格式：telnet+ip/domain+port(把ip换成domain也可以，port为端口号)</p>
<p>5、telnet成功后。cmd窗口一片黑色，只显示一个跳动的点点，不会显示其它内容，说明端口能连通。如果显示’telnet’ 不是内部或外部命令，则需要去系统中开启telnet客户端(教程:<a href="https://blog.csdn.net/qq_35428201/article/details/81048134">https://blog.csdn.net/qq_35428201/article/details/81048134</a>)</p>
<p><em>好记性不如烂笔头，多记录多学习</em></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中Array的一些常用方法和操作</title>
    <url>/2020/12/01/JavaScript%E4%B8%ADArray%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="JavaScript中Array的一些常用方法和操作"><a href="#JavaScript中Array的一些常用方法和操作" class="headerlink" title="JavaScript中Array的一些常用方法和操作"></a>JavaScript中Array的一些常用方法和操作</h1><p>JavaScript的 Array 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组创建</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组长度</span></span><br><span class="line"><span class="keyword">var</span> length=array.length();   <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<h3 id="数组取值"><a href="#数组取值" class="headerlink" title="数组取值"></a>数组取值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、通过数组下标取值</span></span><br><span class="line"><span class="keyword">var</span> first = array[<span class="number">0</span>];   <span class="comment">//Apple</span></span><br><span class="line"><span class="comment">//2、for循环也可以取到想要的值</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> index <span class="keyword">in</span> array</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;下标&quot;</span>+index)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;值&quot;</span>+array[index])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向数组中添加数据(可在for循环中连续添加数据)</span></span><br><span class="line">array.push(obj)  <span class="comment">//obj为插入对象或者数据</span></span><br></pre></td></tr></table></figure>
<h3 id="判断数据在数组中对下标"><a href="#判断数据在数组中对下标" class="headerlink" title="判断数据在数组中对下标"></a>判断数据在数组中对下标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//某个数据在数组中对下标</span></span><br><span class="line">array.indexOf(<span class="string">&#x27;Apple&#x27;</span>);  <span class="comment">//0</span></span><br></pre></td></tr></table></figure>
<h3 id="替换数组对应下标的数据"><a href="#替换数组对应下标的数据" class="headerlink" title="替换数组对应下标的数据"></a>替换数组对应下标的数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//替换数组对应下标的元素，index为你要替换的下标位置，replaceData为替换数据。</span></span><br><span class="line">array.splice(index,<span class="number">1</span>,replaceData)</span><br></pre></td></tr></table></figure>
<h3 id="数组连接或者合并"><a href="#数组连接或者合并" class="headerlink" title="数组连接或者合并"></a>数组连接或者合并</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合并两个或多个数组(可为空数组)。此方法不会更改现有数组，而是返回一个新数组。</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];   <span class="comment">//可为空数组</span></span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];		<span class="comment">//也可为空数组</span></span><br><span class="line"><span class="keyword">const</span> array3 = array1.concat(array2);  <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>
<h3 id="查找满足条件的第一个值"><a href="#查找满足条件的第一个值" class="headerlink" title="查找满足条件的第一个值"></a>查找满足条件的第一个值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回数组中满足条件的第一个元素的值。否则返回 undefined。</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found = array1.find(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);  <span class="comment">//从左到右，大于10的第一个数是12。</span></span><br><span class="line"><span class="built_in">console</span>.log(found);  <span class="comment">//所以输出12</span></span><br></pre></td></tr></table></figure>
<h3 id="判断数组是否包含某个值"><a href="#判断数组是否包含某个值" class="headerlink" title="判断数组是否包含某个值"></a>判断数组是否包含某个值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否包含某个值</span></span><br><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;cat&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="数组转字符串，元素拼接成字符串"><a href="#数组转字符串，元素拼接成字符串" class="headerlink" title="数组转字符串，元素拼接成字符串"></a>数组转字符串，元素拼接成字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组转字符串，元素拼接成字符串</span></span><br><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(elements.join());  <span class="comment">//&quot;Fire,Air,Water&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//&quot;FireAirWater&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">//&quot;Fire-Air-Water&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组倒置与排序"><a href="#数组倒置与排序" class="headerlink" title="数组倒置与排序"></a>数组倒置与排序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组倒置</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.reverse()) <span class="comment">//[&quot;3&quot;, &quot;2&quot;, &quot;1&quot;]</span></span><br><span class="line"><span class="comment">//数组排序方法1</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">//数组排序方法2</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]; </span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line"><span class="built_in">console</span>.log(numbers);  <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line">array1= [];</span><br><span class="line"><span class="comment">//方法2 </span></span><br><span class="line">array2.splice(<span class="number">0</span>,array2.length);  </span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line">array3.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript Array</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目整合Swagger-UI接口文档</title>
    <url>/2020/11/01/SpringBoot%E6%95%B4%E5%90%88Swagger-UI%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="SpringBoot整合Swagger-UI接口文档"><a href="#SpringBoot整合Swagger-UI接口文档" class="headerlink" title="SpringBoot整合Swagger-UI接口文档"></a>SpringBoot整合Swagger-UI接口文档</h1><h2 id="Swagger-UI好处"><a href="#Swagger-UI好处" class="headerlink" title="Swagger-UI好处"></a>Swagger-UI好处</h2><p>Swagger-UI   一个好看又好用的项目接口文档，可以动态地根据注解生成在线API文档。==也就是说和你代码的Controller层的接口方法对应，支持在线接口测试，不依赖第三方工具==</p>
<h2 id="Swagger-UI常用注解介绍"><a href="#Swagger-UI常用注解介绍" class="headerlink" title="Swagger-UI常用注解介绍"></a>Swagger-UI常用注解介绍</h2><p>==@Api==：用于修饰Controller类，生成Controller相关文档信息<br>==@ApiOperation==：用于修饰Controller类中的方法，生成接口方法相关文档信息<br>==@ApiParam==：用于修饰接口中的参数，生成接口参数相关文档信息<br>==@ApiModelProperty==：用于修饰实体类的属性，当实体类是请求参数或返回结果时，直接生成相关文档信息</p>
<h2 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h2><h3 id="1、maven中添加依赖"><a href="#1、maven中添加依赖" class="headerlink" title="1、maven中添加依赖"></a>1、maven中添加依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--Swagger-UI API文档生产工具--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、项目中添加Swagger-UI配置类"><a href="#2、项目中添加Swagger-UI配置类" class="headerlink" title="2、项目中添加Swagger-UI配置类"></a>2、项目中添加Swagger-UI配置类</h3><p>这里参考github上mall项目的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2API文档的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包下controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.macro.mall.tiny.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//为有@Api注解的Controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                <span class="comment">//为有@ApiOperation注解的方法生成API文档</span></span><br><span class="line">               .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;SwaggerUI文档&quot;</span>)   </span><br><span class="line">                .description(<span class="string">&quot;某某某商城项目/系统后台所有接口文档&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;macro&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;版本号1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、配合注解使用"><a href="#3、配合注解使用" class="headerlink" title="3、配合注解使用"></a>3、配合注解使用</h3><p>在你要生成接口文档的Controller层的Class类上面添加@Api(tags = “PmsBrandController”, description = “商品品牌管理”)方法上面添加@ApiOperation(“获取所有品牌列表”)注解</p>
<p><a href="https://imgchr.com/i/Bwdkq0"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/11/01/Bwdkq0.png" alt="Bwdkq0.png"></a></p>
<h3 id="4、查看效果"><a href="#4、查看效果" class="headerlink" title="4、查看效果"></a>4、查看效果</h3><p>访问接口文档地址接口地址：<a href="http://localhost:8086/swagger-ui.html%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C%EF%BC%8C%E6%B3%A8%E6%84%8F%E6%8D%A2%E6%88%90%E8%87%AA%E5%B7%B1%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%EF%BC%88application.yml%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%88%96%E8%80%85%E8%AE%BE%E7%BD%AEspringboot%E9%A1%B9%E7%9B%AE%E7%AB%AF%E5%8F%A3%EF%BC%89%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF8086%E7%AB%AF%E5%8F%A3">http://localhost:8086/swagger-ui.html查看效果，注意换成自己项目的端口号（application.yml中查看或者设置springboot项目端口），我这里使用的是8086端口</a></p>
<p><a href="https://imgchr.com/i/Bwd2WQ"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/11/01/Bwd2WQ.png" alt="Bwd2WQ.png"></a><br>参考：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a></p>
]]></content>
      <categories>
        <category>整合</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>java 日期往后加30天(非工作日)</title>
    <url>/2020/05/28/java%20%E6%97%A5%E6%9C%9F%E5%BE%80%E5%90%8E%E5%8A%A030%E5%A4%A9(%E9%9D%9E%E5%B7%A5%E4%BD%9C%E6%97%A5)/</url>
    <content><![CDATA[<a id="more"></a>

<p>@[TOC](Java 日期往后加30天 非工作日)<br>    ## 一开始我是用Long时间戳毫秒来计算，不知怎么地，我得出的时间没有加，反而变少了，所以后面就用了Calendar类进行操作，得出想要的结果 。<br>        ###<br>        下面是打断点得出的时间错误的图<br>        <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200528151224282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    修改后的代码。只列出主要部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//能拿到推后30天时间的代码</span></span><br><span class="line"> <span class="comment">//获取系统当前时间</span></span><br><span class="line">     Calendar currentdate = Calendar.getInstance();</span><br><span class="line">     <span class="comment">//在这里进行加30天（ps:周六周日也算在里边了）</span></span><br><span class="line">     currentdate.add(Calendar.DATE, <span class="number">30</span>);</span><br><span class="line">     <span class="comment">//得到最后的时间</span></span><br><span class="line">     Date finalday = currentdate.getTime(); </span><br></pre></td></tr></table></figure>
<p>结尾：第一次分享，好怕怕。</p>
]]></content>
      <categories>
        <category>日期加30天 Calendar类计算日期</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>postgres数据库备份和还原命令-亲测有效</title>
    <url>/2020/07/08/postgres%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F%E5%91%BD%E4%BB%A4-%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="cmd命令备份本地postgres数据库以及还原"><a href="#cmd命令备份本地postgres数据库以及还原" class="headerlink" title="cmd命令备份本地postgres数据库以及还原"></a>cmd命令备份本地postgres数据库以及还原</h2><p>ps:<br>1、postgres数据库的备份和还原，前提是都要进来pgadmin安装目录的bin文件夹<br>2、备份后的文件格式是.bak(其它格式我没有测试过)<br>3、本命令备份后，也只能用命令的方式还原，其它还原方式测试没有通过。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200708160233915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>备份命令：pg_dump -h localhost -p 5432 -U postgres -d crcslocalhost&gt; D:\testbackup.bak<br>口令为你的数据库密码，回车。备份成功。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200708160708497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还原命令：psql -h localhost -p 5432 -U postgres -d test02 -f “D:\testbackup.bak”<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200708161459480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结语：如果有什么错误和不当之处，麻烦指出。感谢x3！</p>
]]></content>
      <categories>
        <category>数据库 postgres</category>
      </categories>
      <tags>
        <tag>postgresql 运维</tag>
      </tags>
  </entry>
  <entry>
    <title>vue element子组件中调用父组件数据</title>
    <url>/2020/07/03/vue%20element%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%B0%83%E7%94%A8%E7%88%B6%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="vue-element子组件中调用父组件数据"><a href="#vue-element子组件中调用父组件数据" class="headerlink" title="vue element子组件中调用父组件数据"></a>vue element子组件中调用父组件数据</h2><p>看图吧。我是一个沉默寡言的代码编辑者。图中描述的应该算是比较详细的了。<br>图一：一个是小头爸爸，一个是大头儿子<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913278.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图一：一个是小头爸爸，一个是大头儿子"><br>图二：爸爸给儿子取了一个好听的名字叫‘my-economy-info’<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913253.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图二：爸爸给儿子取了一个好听的名字叫‘my-economy-info’"><br>图三：爸爸给儿子穿了两件衣服，data和task,(俗称绑定数据)<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913240.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图三：爸爸给儿子穿了两件衣服，data和task,(俗称绑定数据)"><br>图四：儿子用props接收来自爸爸的爱意data和task,其中，casedata这件衣服没有作用，里面没有数据，因为爸爸没有给它。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913195.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图四：儿子用props接收来自爸爸的爱意data和task,其中，casedata这件衣服没有作用，里面没有数据，因为爸爸没有给它。"><br>好了，完成。拿到数据你就可以随便用了。</p>
]]></content>
      <categories>
        <category>子组件调用父组件数据 父子组件之前通信</category>
      </categories>
      <tags>
        <tag>vue javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端js排序</title>
    <url>/2020/07/13/%E5%89%8D%E7%AB%AFjs%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="前端在js中排序数据"><a href="#前端在js中排序数据" class="headerlink" title="前端在js中排序数据"></a>前端在js中排序数据</h2><p>和后端排序类似，this.sortdata为你要降序处理的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.sortdata.sort(function (a,b) &#123;</span><br><span class="line">                return a.value-b.value;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<p> 如果要升序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.sortdata.sort(function (a,b) &#123;</span><br><span class="line">               return b.value-a.value;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>

<p>注：a.value中的value为sortdate中的值。即你要根据sortdata中的value值来排序。如果sortdata中你要根据其它值来排序(如：年龄、分数、数量等等)，则自行替换</p>
]]></content>
      <categories>
        <category>排序 前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>我用命令创建的第一篇博客</title>
    <url>/2020/09/03/%E6%88%91%E7%94%A8%E5%91%BD%E4%BB%A4%E5%88%9B%E5%BB%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="记录和学习MarkDown语法"><a href="#记录和学习MarkDown语法" class="headerlink" title="记录和学习MarkDown语法"></a>记录和学习MarkDown语法</h1><h2 id="上面的是一级标题。本标题是二级标题"><a href="#上面的是一级标题。本标题是二级标题" class="headerlink" title="上面的是一级标题。本标题是二级标题"></a>上面的是一级标题。本标题是二级标题</h2><h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><h4 id="我是四级标题"><a href="#我是四级标题" class="headerlink" title="我是四级标题"></a>我是四级标题</h4><h5 id="我是五级标题"><a href="#我是五级标题" class="headerlink" title="我是五级标题"></a>我是五级标题</h5><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br>一个井号加空格，表示一级标题，两个井号代表二级标题。依此类推</p>
<p>要加粗的文字左右分别用两个*号包起来，比如：<strong>我是加粗的</strong></p>
<p>要倾斜的文字左右分别用一个星号包起来 比如：<em>我怎么倾斜了</em></p>
<p>要加删除线文字，左右分别加两个波浪线，比如：<del>这是加删除线的文字</del></p>
<p>三个或者三个以上的 - 或者 * 都可以是分割线<br>分割线</p>
<hr>
<!--<img src= "/img/loading.gif" data-lazy-src="/2020/09/03/%E6%88%91%E7%94%A8%E5%91%BD%E4%BB%A4%E5%88%9B%E5%BB%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Mosey.jpg" class="" title="作者镇楼">-->

<p><strong>中括号里写超链接百度，后面跟的括号里边写url.如下</strong><br><a href="http://baidu.com/">百度</a></p>
<p><code>  技术这个东西。只能自己慢慢摸索</code></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>List</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>语法</tag>
      </tags>
  </entry>
</search>
