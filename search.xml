<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ActiveMq学习</title>
    <url>/2021/01/07/ActiveMq/</url>
    <content><![CDATA[<h1 id="ActiveMq相关认识"><a href="#ActiveMq相关认识" class="headerlink" title="ActiveMq相关认识"></a>ActiveMq相关认识</h1><p>   ActiveMq是一个消息队列中间件，类似的还有RabbitMQ、Kafka等。</p>
<h2 id="ActiveMq的优点或者作用"><a href="#ActiveMq的优点或者作用" class="headerlink" title="ActiveMq的优点或者作用"></a>ActiveMq的优点或者作用</h2><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><ul>
<li>在大型网站中最常见使用消息中间件，能降低应用的耦合度。<br>比如：在订单系统和库存系统中引入消息中间件，如果用户下单成功后，库存系统刚好发生宕机故障，也不会影响数据，因为下单成功后，已经把减库存的操作持久化告诉ActiveMq，ActiveMq会在库存系统恢复正常的时候提醒写入数据到库存系统。<h3 id="流量消峰-解决高并发场景"><a href="#流量消峰-解决高并发场景" class="headerlink" title="流量消峰(解决高并发场景)"></a>流量消峰(解决高并发场景)</h3></li>
<li>没有中间件的之前，在整点秒杀和抢购活动中，大量的同一请求会同时对数据库进行CRUD操作。因为ActiveMq是先进先出，所以当有大量同求时，先经过ActiveMq把请求集中起来统一管理，采用定义好的规则把请求分批处理。这样就能直到保护数据库的作用。<br>上面所说规则可理解为，500个商品，100000个抢购请求，那么ActiveMq就会把所有的请求先集中处理，前500个先进先出，500之后的就抢购失败，不经过数据库处理，直接抛弃用户请求或跳转到抢购失败页面提示用户抢购失败。<br>ps:解耦这个特定业务环境下是使用<strong>发布-订阅模式</strong>的<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3></li>
<li>将不是很重要的业务逻辑进行异步处理，比如注册功能，传统的注册功能要在完成发送注册邮件和注册短信后才响应给前端，这样显得有点慢，因为邮件和短信提示不算是很重要，可以在响应给用户后慢一点点发邮件和短信提示，所以我们可以把这两个部分都交给ActiveMq来异步处理。<br>具体可以看这篇博客<a href="https://www.cnblogs.com/cxyyh/p/10700437.html">戳这里</a>有图文，更易理解</li>
</ul>
<h2 id="ActiveMq的两种消息模型"><a href="#ActiveMq的两种消息模型" class="headerlink" title="ActiveMq的两种消息模型"></a>ActiveMq的两种消息模型</h2><h3 id="ptp-点到点模型"><a href="#ptp-点到点模型" class="headerlink" title="ptp(点到点模型)"></a>ptp(点到点模型)</h3><ul>
<li>生产者和消费者一对一关系，消息保证送达，离线消费者可以在下次上线后收到之前积压的消息。<h3 id="p-s-发布-订阅模型"><a href="#p-s-发布-订阅模型" class="headerlink" title="p/s(发布/订阅模型)"></a>p/s(发布/订阅模型)</h3></li>
<li>生产者和消费者一对多关系，一个消息生产者可以被多个消费者订阅消费。类似关注微信公众号一样，在你关注公众号前，公众号发布的文章，你是不能接收到推送的。只有你订阅后，公众号推送的文章你才能收到提醒。  <h4 id="p-s普通订阅"><a href="#p-s普通订阅" class="headerlink" title="p/s普通订阅"></a>p/s普通订阅</h4></li>
<li>当没有持久订阅者和在线的普通订阅者，消息不会保存，普通订阅者上线后也收不到该消息。<h4 id="p-s持久订阅"><a href="#p-s持久订阅" class="headerlink" title="p/s持久订阅"></a>p/s持久订阅</h4></li>
<li>如果有离线的持久订阅者，ActiveMq会为该持久订阅者保存消息，当该持久订阅者上线后，会收到消息。</li>
</ul>
]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
      <tags>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA判断某天是周几</title>
    <url>/2020/07/31/JAVA%E5%88%A4%E6%96%AD%E6%9F%90%E5%A4%A9%E6%98%AF%E5%91%A8%E5%87%A0/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="java判断周六周日，周一到周五"><a href="#java判断周六周日，周一到周五" class="headerlink" title="java判断周六周日，周一到周五"></a>java判断周六周日，周一到周五</h2><p>这里利用到了Calendar类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        String Date &#x3D; &quot;2020-08-03&quot;;  &#x2F;&#x2F;定义初始是周一</span><br><span class="line">        Date testdate &#x3D; sdf.parse(Date);</span><br><span class="line">        Calendar cal &#x3D; Calendar.getInstance();</span><br><span class="line">        cal.setTime(testdate); </span><br><span class="line">       if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.MONDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周一&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">        &#x2F;&#x2F;日期加一天</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.TUESDAY) &#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周二&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.WEDNESDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周三&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.THURSDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周四&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.FRIDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周五&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.SATURDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周六&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.add(Calendar.DATE,1);</span><br><span class="line">        if(cal.get(Calendar.DAY_OF_WEEK)&#x3D;&#x3D;Calendar.SUNDAY)&#123;</span><br><span class="line">            System.out.println(sdf.format(cal.getTime())+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+&quot;是周日&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>结果打印：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-08-03&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周一&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-04&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周二&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-05&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周三&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-06&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周四&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-07&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周五&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-08&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周六&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-08-09&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;是周日&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">记录代码，记录工作，记录自己。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Calendar Calendar类计算日期 判断周一到周日</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Ping测试两个IP网络之间的连通性</title>
    <url>/2020/09/27/Ping%E6%B5%8B%E8%AF%95%E4%B8%A4%E4%B8%AAIP%E7%BD%91%E7%BB%9C%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="使用ping或者telnet命令"><a href="#使用ping或者telnet命令" class="headerlink" title="使用ping或者telnet命令"></a>使用ping或者telnet命令</h2><p>1、ping和telnet命令作用类似，都是来测试网络的连通性,一般用ping就可以了</p>
<p>2、ping命令写法/格式：ping+ip/domain(ip也可以是本机ip，domain为域名，例如<a href="http://www.baidu.com/">www.baidu.com</a>)</p>
<p>3、ping命令会发送四次数据包，看到“已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)”代表能连通</p>
<p>4、telnet命令写法/格式：telnet+ip/domain+port(把ip换成domain也可以，port为端口号)</p>
<p>5、telnet成功后。cmd窗口一片黑色，只显示一个跳动的点点，不会显示其它内容，说明端口能连通。如果显示’telnet’ 不是内部或外部命令，则需要去系统中开启telnet客户端(教程:<a href="https://blog.csdn.net/qq_35428201/article/details/81048134">https://blog.csdn.net/qq_35428201/article/details/81048134</a>)</p>
<p><em>好记性不如烂笔头，多记录多学习</em></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis(其实不难)</title>
    <url>/2021/03/07/SpringBoot%E6%95%B4%E5%90%88redis/</url>
    <content><![CDATA[<h1 id="两种整合方法"><a href="#两种整合方法" class="headerlink" title="两种整合方法"></a>两种整合方法</h1><blockquote>
<p>一种是spring-boot-starter-data-redis<br>另一种是jedis</p>
</blockquote>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>1、添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖配置--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、SpringBoot配置文件定义redis相关</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># Redis主机地址</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># Redis数据库下标（从0开始，默认第一个库）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="comment"># Redis密码（默认为空）</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">3000ms</span> <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="comment"># 自定义redis的key的前缀和到期时间</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">key:</span></span><br><span class="line">    <span class="attr">prefix:</span></span><br><span class="line">      <span class="attr">authCode:</span> <span class="string">&quot;portal:authCode:&quot;</span></span><br><span class="line">    <span class="attr">expire:</span></span><br><span class="line">      <span class="attr">authCode:</span> <span class="number">120</span> <span class="comment"># 验证码超期时间</span></span><br></pre></td></tr></table></figure>
<p>3、定义一个redis的常用操作接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">String <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置超期时间</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> expire)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自增操作</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> delta 自增步长</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">Long <span class="title">increment</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、创建RedisService接口的实现类RedisServiceImpl，并在实现类中导入第一步依赖中的StringRedisTemplate类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">increment</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().increment(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>RedisTemplate的以字符串为中心的扩展。 由于大多数针对Redis的操作都是基于String的，因此此类提供了一个专用类，该类可最大程度地减少其通用template配置，尤其是在序列化程序方面。</p>
</blockquote>
<p>5、使用方法<br>1.在要使用的类中，注入接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> RedisService redisService;</span><br></pre></td></tr></table></figure>

<p>2.get set expire使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取出配置文件中自定义的key的前缀和到期时间</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;redis.key.prefix.authCode&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String REDIS_KEY_PREFIX_AUTH_CODE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;redis.key.expire.authCode&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long AUTH_CODE_EXPIRE_SECONDS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置值</span></span><br><span class="line"> redisService.set(REDIS_KEY_PREFIX_AUTH_CODE+<span class="string">&quot;任一字符串&quot;</span>,value)  </span><br><span class="line"> <span class="comment">//获取值  </span></span><br><span class="line"> redisService.get(key)  </span><br><span class="line"> <span class="comment">//设置到期时间expirationdate</span></span><br><span class="line"> redisService.expire(key,AUTH_CODE_EXPIRE_SECONDS) </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>配置文件和上面的一样，只是依赖和工具类不一样。个人觉得这种方法好点。这个能操作除了String类型外，还可以操作其它类型的数据。</p>
</blockquote>
<p>1.添加jedis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.JedisUtil工具类编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redis_host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer redis_port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.jedis.pool.max-idle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer max_idle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.jedis.pool.min-idle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer min_idle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取redis操作对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String host = redis_host;</span><br><span class="line">        <span class="keyword">int</span> port = redis_port;</span><br><span class="line">        <span class="keyword">int</span> maxTotal = max_idle;</span><br><span class="line">        <span class="keyword">int</span> maxIdle = min_idle;</span><br><span class="line">        <span class="comment">//设置配置信息</span></span><br><span class="line">  JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        jedisPoolConfig.setMaxTotal(maxTotal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">  JedisPool jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port);</span><br><span class="line">        Jedis jedis=jedisPool.getResource();</span><br><span class="line">        <span class="keyword">return</span> jedis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.使用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入工具类</span></span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> JedisUtil jedisUtil;</span><br><span class="line"></span><br><span class="line">省略...</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取jedis对象，操作String类型，其它类型的省略。</span></span><br><span class="line">Jedis jedis = jedisUtil.getJedis();</span><br><span class="line">jedis.set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>java 日期往后加30天(非工作日)</title>
    <url>/2020/05/28/java%20%E6%97%A5%E6%9C%9F%E5%BE%80%E5%90%8E%E5%8A%A030%E5%A4%A9(%E9%9D%9E%E5%B7%A5%E4%BD%9C%E6%97%A5)/</url>
    <content><![CDATA[<span id="more"></span>

<p>@[TOC](Java 日期往后加30天 非工作日)<br>    ## 一开始我是用Long时间戳毫秒来计算，不知怎么地，我得出的时间没有加，反而变少了，所以后面就用了Calendar类进行操作，得出想要的结果 。<br>        ###<br>        下面是打断点得出的时间错误的图<br>        <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200528151224282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    修改后的代码。只列出主要部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//能拿到推后30天时间的代码</span></span><br><span class="line"> <span class="comment">//获取系统当前时间</span></span><br><span class="line">     Calendar currentdate = Calendar.getInstance();</span><br><span class="line">     <span class="comment">//在这里进行加30天（ps:周六周日也算在里边了）</span></span><br><span class="line">     currentdate.add(Calendar.DATE, <span class="number">30</span>);</span><br><span class="line">     <span class="comment">//得到最后的时间</span></span><br><span class="line">     Date finalday = currentdate.getTime(); </span><br></pre></td></tr></table></figure>
<p>结尾：第一次分享，好怕怕。</p>
]]></content>
      <categories>
        <category>日期加30天 Calendar类计算日期</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目整合Swagger-UI接口文档</title>
    <url>/2020/11/01/SpringBoot%E6%95%B4%E5%90%88Swagger-UI%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="SpringBoot整合Swagger-UI接口文档"><a href="#SpringBoot整合Swagger-UI接口文档" class="headerlink" title="SpringBoot整合Swagger-UI接口文档"></a>SpringBoot整合Swagger-UI接口文档</h1><h2 id="Swagger-UI好处"><a href="#Swagger-UI好处" class="headerlink" title="Swagger-UI好处"></a>Swagger-UI好处</h2><p>Swagger-UI   一个好看又好用的项目接口文档，可以动态地根据注解生成在线API文档。==也就是说和你代码的Controller层的接口方法对应，支持在线接口测试，不依赖第三方工具==</p>
<h2 id="Swagger-UI常用注解介绍"><a href="#Swagger-UI常用注解介绍" class="headerlink" title="Swagger-UI常用注解介绍"></a>Swagger-UI常用注解介绍</h2><p>==@Api==：用于修饰Controller类，生成Controller相关文档信息<br>==@ApiOperation==：用于修饰Controller类中的方法，生成接口方法相关文档信息<br>==@ApiParam==：用于修饰接口中的参数，生成接口参数相关文档信息<br>==@ApiModelProperty==：用于修饰实体类的属性，当实体类是请求参数或返回结果时，直接生成相关文档信息</p>
<h2 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h2><h3 id="1、maven中添加依赖"><a href="#1、maven中添加依赖" class="headerlink" title="1、maven中添加依赖"></a>1、maven中添加依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--Swagger-UI API文档生产工具--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、项目中添加Swagger-UI配置类"><a href="#2、项目中添加Swagger-UI配置类" class="headerlink" title="2、项目中添加Swagger-UI配置类"></a>2、项目中添加Swagger-UI配置类</h3><p>这里参考github上mall项目的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2API文档的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包下controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.macro.mall.tiny.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//为有@Api注解的Controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                <span class="comment">//为有@ApiOperation注解的方法生成API文档</span></span><br><span class="line">               .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;SwaggerUI文档&quot;</span>)   </span><br><span class="line">                .description(<span class="string">&quot;某某某商城项目/系统后台所有接口文档&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;macro&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;版本号1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、配合注解使用"><a href="#3、配合注解使用" class="headerlink" title="3、配合注解使用"></a>3、配合注解使用</h3><p>在你要生成接口文档的Controller层的Class类上面添加@Api(tags = “PmsBrandController”, description = “商品品牌管理”)方法上面添加@ApiOperation(“获取所有品牌列表”)注解</p>
<p><a href="https://imgchr.com/i/Bwdkq0"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/11/01/Bwdkq0.png" alt="Bwdkq0.png"></a></p>
<h3 id="4、查看效果"><a href="#4、查看效果" class="headerlink" title="4、查看效果"></a>4、查看效果</h3><p>访问接口文档地址接口地址：<a href="http://localhost:8086/swagger-ui.html%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C%EF%BC%8C%E6%B3%A8%E6%84%8F%E6%8D%A2%E6%88%90%E8%87%AA%E5%B7%B1%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%EF%BC%88application.yml%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%88%96%E8%80%85%E8%AE%BE%E7%BD%AEspringboot%E9%A1%B9%E7%9B%AE%E7%AB%AF%E5%8F%A3%EF%BC%89%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF8086%E7%AB%AF%E5%8F%A3">http://localhost:8086/swagger-ui.html查看效果，注意换成自己项目的端口号（application.yml中查看或者设置springboot项目端口），我这里使用的是8086端口</a></p>
<p><a href="https://imgchr.com/i/Bwd2WQ"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/11/01/Bwd2WQ.png" alt="Bwd2WQ.png"></a><br>参考：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a></p>
]]></content>
      <categories>
        <category>整合</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发规范总结</title>
    <url>/2021/02/06/java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Java开发规范总结"><a href="#Java开发规范总结" class="headerlink" title="Java开发规范总结"></a>Java开发规范总结</h1><h2 id="一些命名和定义规范"><a href="#一些命名和定义规范" class="headerlink" title="一些命名和定义规范"></a>一些命名和定义规范</h2><ul>
<li>类名使用 UpperCamelCase 风格(单词首字母大写)，必须遵从驼峰形式，但以下情形例外：DO / BO / DTO / VO / AO</li>
<li>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格(第一个单词小写，后面的都大写)</li>
<li>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</li>
<li>抽象类User命名AbstractUser，异常类UserException，测试类UserTest</li>
<li>实体类Boolean类型的属性命名都不要加 is，例如Boolean isDeleted不推荐</li>
<li>包名统一使用小写，com.公司名.项目名.模块名….或者cn.公司名.项目名.模块名….</li>
<li> Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。正例：Long a=10000L<h2 id="代码格式相关"><a href="#代码格式相关" class="headerlink" title="代码格式相关"></a>代码格式相关</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 缩进 4 个空格 </span></span><br><span class="line">    String say = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">// 运算符的左右必须有一个空格 </span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 </span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123; </span><br><span class="line">       System.out.println(say); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行 </span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123; </span><br><span class="line">       System.out.println(<span class="string">&quot;world&quot;</span>); </span><br><span class="line">        <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行 </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">       System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">       <span class="comment">// 在右大括号后直接结束，则必须换行 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
<li>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正例： </span></span><br><span class="line">  <span class="string">&quot;test&quot;</span>.equals(object); </span><br><span class="line"><span class="comment">// 反例： </span></span><br><span class="line">  object.equals(<span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="comment">// 说明：推荐使用 java.util.Objects#equals （JDK7 引入的工具类）</span></span><br></pre></td></tr></table></figure></li>
<li>单行字符数限制不超过 120 个，超出需要换行，第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进</li>
<li>方法参数在定义和传入时，多个参数逗号后边必须加空格。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正例：下例中实参的&quot;a&quot;,后边必须要有一个空格。 </span></span><br><span class="line">    method(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>类的静态变量或静态方法直接使用类名.来访问</li>
<li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 </li>
<li>工具类不允许有 public 或 default <font color="#FF0000">构造方法</font> </li>
<li>工具类的方法常多用static修饰，使用的时候直接类名.方法（）</li>
<li>工具类常量定义和普通类常量定义一样，都用public static final 修饰</li>
<li>在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程 序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且 放在最后，即使它什么代码也没有<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        System.out.println(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        System.out.println(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，<font color="#ff0000">避免使用 单行的形式</font>：if (condition) statements;</li>
<li>表达异常的分支时，少用 if-else 方式，这种方式可以改写成：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 接着写 else 的业务逻辑代码;</span></span><br></pre></td></tr></table></figure>
如果非得使用 if()…else if()…else…方式表达逻辑，【强制】避免后续代码维 护困难，请勿超过 3 层。 正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。卫语句示例 如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isBusy()) &#123;</span><br><span class="line">        System.out.println(“change time.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFree()) &#123;</span><br><span class="line">        System.out.println(“go to travel.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(“stay at home to learn Alibaba Java Coding Guideline.”);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果if的判断条件表达式很长，应该将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> existed = (file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...);</span><br><span class="line"><span class="keyword">if</span> (existed) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>不建议在循环中定义对象、变量、 获取数据库连接，以及进行不必要的 try-catch 操作，条件允许下尽可能在循环体外进行，不然会影响代码性能<h2 id="注释相关"><a href="#注释相关" class="headerlink" title="注释相关"></a>注释相关</h2></li>
<li>类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用 //xxx 方式。因为Javadoc格式鼠标移动会提示。//xxx格式却不能</li>
<li>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>
<li>项目中注释掉的代码。说明：代码被注释掉有两种可能性：<br>1）后续会恢复此段代码逻辑。<br>2）如果永久不用。则删除（不用怕，代码仓库保存了历史代码）。<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2></li>
<li>正则表达式不要在方法体内定义<h1 id="MySQL相关"><a href="#MySQL相关" class="headerlink" title="MySQL相关"></a>MySQL相关</h1></li>
<li>表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint。<br>例子：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</li>
<li>表名、字段名必须使用小写字母或数字。例子：getter_admin，task_config，level3_name</li>
<li>主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名</li>
<li>小数类型为 decimal，禁止使用 float 和 double（精度会丢失）</li>
<li>char 类型的存放固定长度的数据  如：身份证号(18） 手机号电话号(11)  性别(1)等等，如果存储的数据的大小比定义时的小，会自动补全。存储固定的长度</li>
<li>varchar类型长度可变。</li>
<li>in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控 制在 1000 个之内。</li>
<li>TRUNCATE TABLE 比 DELETE 速度快，TRUNCATE 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</li>
<li>在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</li>
</ul>
<hr>
<p>摘录自某阿里巴巴开发手册，哪个版本的忘记了:pig:。</p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令和操作总结</title>
    <url>/2020/10/02/linux/</url>
    <content><![CDATA[<h1 id="Linux常用命令和操作总结"><a href="#Linux常用命令和操作总结" class="headerlink" title="Linux常用命令和操作总结"></a>Linux常用命令和操作总结</h1><h2 id="Linux是什么"><a href="#Linux是什么" class="headerlink" title="Linux是什么"></a>Linux是什么</h2><p>非官方套路，开始先来一大堆看不懂的介绍。</p>
<ul>
<li>Linux 是在 1991 由林纳斯·托瓦兹在赫尔辛基大学上学时创立的，主要受到 Minix 和 Unix 思想的启发，所以Linux继承了Unix。</li>
<li>Linux是开源的，目前我所了解到的Linux的发行版有Ubuntu和CentOS。当然还有其它的。<strong>本篇主要是在Ubuntu 20.04.1版本上操作Linux</strong>。</li>
<li>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。<h2 id="相关环境准备"><a href="#相关环境准备" class="headerlink" title="相关环境准备"></a>相关环境准备</h2></li>
<li>Ubuntu的运行要依赖于Vm虚拟机，关于Vm和Ubuntu的安装，可以戳这里<a href="https://blog.csdn.net/hao5119266/article/details/89198275">快点我</a>，跟着教程一步步来。相信我，你可以的。<h2 id="Linux常用命令总结"><a href="#Linux常用命令总结" class="headerlink" title="Linux常用命令总结"></a>Linux常用命令总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入文件夹</span><br><span class="line">cd dir          </span><br><span class="line">&#x2F;&#x2F;跳转到首次进入终端时的路径，相当于用户根目录吧。</span><br><span class="line">cd ~		</span><br><span class="line">&#x2F;&#x2F;返回上一级，如果是..&#x2F;..则代表返回上两级</span><br><span class="line">cd ..		</span><br><span class="line">&#x2F;&#x2F;返回进入此目录之前所在目录(注意和cd..区分开来)</span><br><span class="line">cd - 		</span><br><span class="line">&#x2F;&#x2F;查看当前目录下有什么内容</span><br><span class="line">ls	</span><br><span class="line">&#x2F;&#x2F;罗列出当前文件或目录的详细信息，含有时间、读写权限、大小、时间等信息 	</span><br><span class="line">ll	</span><br><span class="line">&#x2F;&#x2F;查看当前所在的全路径	</span><br><span class="line">pwd </span><br><span class="line">&#x2F;&#x2F;清除屏幕所有命令		</span><br><span class="line">clear	</span><br><span class="line">&#x2F;&#x2F;把file文件移动到dir目录，其中file也可以是一个目录	</span><br><span class="line">mv file dir	</span><br><span class="line">&#x2F;&#x2F;把file文件复制一份到dir目录</span><br><span class="line">cp -r fileurl dir        </span><br><span class="line">&#x2F;&#x2F;解压xxx.tar.gz到当前目录     </span><br><span class="line">tar zxvf xxx.tar.gz     </span><br><span class="line">&#x2F;&#x2F;把xxx.tar.gz解压到指定的dir文件夹      </span><br><span class="line">tar zxvf xxx.tar.gz -C dir   </span><br><span class="line">&#x2F;&#x2F;参数为文件或者文件夹的路径。使用sudo会要求用户输入密码。   </span><br><span class="line">sudo rm -r 参数      </span><br><span class="line">&#x2F;&#x2F;查看ubuntu版本号         </span><br><span class="line">cat &#x2F;etc&#x2F;issue	             </span><br><span class="line">&#x2F;&#x2F;安装软件 </span><br><span class="line">sudo apt install [software]  </span><br><span class="line">&#x2F;&#x2F;卸载软件</span><br><span class="line">sudo apt remove [software]   </span><br></pre></td></tr></table></figure>
<h2 id="Linux终端里的颜色区分"><a href="#Linux终端里的颜色区分" class="headerlink" title="Linux终端里的颜色区分"></a>Linux终端里的颜色区分</h2></li>
</ul>
<ol>
<li>蓝色——&gt;目录</li>
<li>绿色——&gt;可执行文件</li>
<li>红色——&gt;压缩文件</li>
<li>浅蓝色—&gt;链接文件</li>
<li>灰色——&gt;其他文件<h2 id="vim编辑器日常使用"><a href="#vim编辑器日常使用" class="headerlink" title="vim编辑器日常使用"></a>vim编辑器日常使用</h2></li>
</ol>
<ul>
<li>vim编辑器有3种模式，分别是<strong>命令模式、插入模式、底线命令模式</strong>。<br><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/08/sn2Iqs.png"></li>
<li>在进行编辑时，你要注意的是模式的切换，vi编辑**默认进入命令模式(此时不能输入内容)**，如果想在文件中插入内容，则要先按下”i”，然后才可以输入，输入完后，再按Esc退出插入模式。然后按“shift+;”输入:冒号，进入底线命令。再输入wq保存退出。</li>
<li>如果在编辑过程中==出现键盘方向键变成ABCD==的情况，解决方法如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;按顺序执行以下命令</span><br><span class="line">sudo apt-get remove vim-common</span><br><span class="line">sudo apt-get install aptitude</span><br><span class="line">sudo aptitude install vim</span><br></pre></td></tr></table></figure>
<h2 id="vim设置永久显示行号命令"><a href="#vim设置永久显示行号命令" class="headerlink" title="vim设置永久显示行号命令"></a>vim设置永久显示行号命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;按顺序执行以下命令</span><br><span class="line">vim ~&#x2F;.vimrc    &#x2F;&#x2F;打开配置文件</span><br><span class="line">:set nu         &#x2F;&#x2F;在编辑区中输入:set nu</span><br><span class="line">:wq             &#x2F;&#x2F;保存并退出</span><br></pre></td></tr></table></figure></li>
<li>如果用:wq保存文件报“无法打开并写入文件”错误，请用下面的命令保存：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;忽略权限保存</span><br><span class="line">: w ! sudo tee %</span><br></pre></td></tr></table></figure>
<h2 id="Linux软件安装-Ubuntu下"><a href="#Linux软件安装-Ubuntu下" class="headerlink" title="Linux软件安装(Ubuntu下)"></a>Linux软件安装(Ubuntu下)</h2></li>
<li>Linux 大小写敏感</li>
<li>如果发现使用”sudo apt-get install xxxx”命令报“在等待缓存锁：无法获得锁……由进程7358持有”错误的话，可以使用以下命令解决<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;依次运行</span><br><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend</span><br><span class="line">sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建tomcat命令</span><br><span class="line">mkdir tomcat   </span><br><span class="line">&#x2F;&#x2F;进入tomcat目录</span><br><span class="line">cd tomcat     </span><br><span class="line">&#x2F;&#x2F;下载tomcat8.5压缩包</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.61&#x2F;bin&#x2F;apache-tomcat-8.5.61.tar.gz  </span><br><span class="line">&#x2F;&#x2F;解压到当前目录</span><br><span class="line">tar xzvf apache-tomcat-8.5.61.tar.gz   </span><br><span class="line">&#x2F;&#x2F;然后进入 apache-tomcat-8.5.61</span><br><span class="line">cd apache-tomcat-8.5.61&#x2F;   </span><br><span class="line">&#x2F;&#x2F;进入到bin目录       </span><br><span class="line">cd bin     </span><br><span class="line">&#x2F;&#x2F;启动tomcat，并自行在浏览器输入localhost:8080查看是否启动成功                       </span><br><span class="line">.&#x2F;startup.sh      </span><br><span class="line">&#x2F;&#x2F;停止tomcat                 </span><br><span class="line">.&#x2F;shutdown.sh            </span><br></pre></td></tr></table></figure>
<h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &#x2F;&#x2F;以下是根据回忆写的。其中有可能会少了某一步，有待验证</span><br><span class="line">&#x2F;&#x2F;1、创建文件夹：</span><br><span class="line">mkdir mysql</span><br><span class="line">&#x2F;&#x2F;2、cd mysql后下载rpm文件：</span><br><span class="line">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">&#x2F;&#x2F;3、安装服务</span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line">&#x2F;&#x2F;4、启动mysql：</span><br><span class="line">service mysqld start</span><br><span class="line">&#x2F;&#x2F;5、登录mysql:  </span><br><span class="line">sudo mysql -u root -p</span><br><span class="line">&#x2F;&#x2F;6、查看所有库：</span><br><span class="line">show databases;（ps:sql命令不要忘记结束;标记）</span><br><span class="line">&#x2F;&#x2F;7、选择使用某个库：</span><br><span class="line">use 库名</span><br><span class="line">&#x2F;&#x2F;8、查看库中所有表：</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1、安装：</span><br><span class="line">sudo apt install nginx</span><br><span class="line">&#x2F;&#x2F;2、查看版本：</span><br><span class="line">nginx -V</span><br><span class="line">&#x2F;&#x2F;3、启动nginx：</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start</span><br><span class="line">&#x2F;&#x2F;4、浏览器访问：localhost:80显示欢迎页代表启动成功(nginx默认端口80)</span><br></pre></td></tr></table></figure>
<h3 id="top命令查看Linux进程相关"><a href="#top命令查看Linux进程相关" class="headerlink" title="top命令查看Linux进程相关"></a>top命令查看Linux进程相关</h3><blockquote>
<p>查看所有进程：top</p>
</blockquote>
<blockquote>
<p>退出top命令行：q</p>
</blockquote>
<blockquote>
<p>按Cpu占比排序(高–低)：shift + p</p>
</blockquote>
<blockquote>
<p>按内存占比排序(高–低)：shift + m</p>
</blockquote>
<blockquote>
<p>切换排序列：shift + &gt;或者shift + &lt;</p>
</blockquote>
<blockquote>
<p>top命令默认的排序列是“%CPU”。</p>
</blockquote>
<blockquote>
<p>高亮显示排序列：x</p>
</blockquote>
<blockquote>
<p>查看8080端口占用的PID进程：lsof -i:8080（主要看项目yml配置文件用的是哪个端口）  </p>
</blockquote>
<blockquote>
<p>杀进程：kill -9 PID代号   </p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中Array的一些常用方法和操作</title>
    <url>/2020/12/01/JavaScript%E4%B8%ADArray%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="JavaScript中Array的一些常用方法和操作"><a href="#JavaScript中Array的一些常用方法和操作" class="headerlink" title="JavaScript中Array的一些常用方法和操作"></a>JavaScript中Array的一些常用方法和操作</h1><p>JavaScript的 Array 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组创建</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组长度</span></span><br><span class="line"><span class="keyword">var</span> length=array.length();   <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<h3 id="数组取值"><a href="#数组取值" class="headerlink" title="数组取值"></a>数组取值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、通过数组下标取值</span></span><br><span class="line"><span class="keyword">var</span> first = array[<span class="number">0</span>];   <span class="comment">//Apple</span></span><br><span class="line"><span class="comment">//2、for循环也可以取到想要的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span> array)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;下标&quot;</span>+index)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;值&quot;</span>+array[index])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向数组中添加数据(可在for循环中连续添加数据)</span></span><br><span class="line">array.push(obj)  <span class="comment">//obj为插入对象或者数据</span></span><br></pre></td></tr></table></figure>
<h3 id="判断数据在数组中对下标"><a href="#判断数据在数组中对下标" class="headerlink" title="判断数据在数组中对下标"></a>判断数据在数组中对下标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//某个数据在数组中对下标</span></span><br><span class="line">array.indexOf(<span class="string">&#x27;Apple&#x27;</span>);  <span class="comment">//0</span></span><br></pre></td></tr></table></figure>
<h3 id="替换数组对应下标的数据"><a href="#替换数组对应下标的数据" class="headerlink" title="替换数组对应下标的数据"></a>替换数组对应下标的数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//替换数组对应下标的元素，index为你要替换的下标位置，replaceData为替换数据。</span></span><br><span class="line">array.splice(index,<span class="number">1</span>,replaceData)</span><br></pre></td></tr></table></figure>
<h3 id="数组连接或者合并"><a href="#数组连接或者合并" class="headerlink" title="数组连接或者合并"></a>数组连接或者合并</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合并两个或多个数组(可为空数组)。此方法不会更改现有数组，而是返回一个新数组。</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];   <span class="comment">//可为空数组</span></span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];		<span class="comment">//也可为空数组</span></span><br><span class="line"><span class="keyword">const</span> array3 = array1.concat(array2);  <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>
<h3 id="查找满足条件的第一个值"><a href="#查找满足条件的第一个值" class="headerlink" title="查找满足条件的第一个值"></a>查找满足条件的第一个值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回数组中满足条件的第一个元素的值。否则返回 undefined。</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found = array1.find(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);  <span class="comment">//从左到右，大于10的第一个数是12。</span></span><br><span class="line"><span class="built_in">console</span>.log(found);  <span class="comment">//所以输出12</span></span><br></pre></td></tr></table></figure>
<h3 id="判断数组是否包含某个值"><a href="#判断数组是否包含某个值" class="headerlink" title="判断数组是否包含某个值"></a>判断数组是否包含某个值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否包含某个值</span></span><br><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;cat&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="数组转字符串，元素拼接成字符串"><a href="#数组转字符串，元素拼接成字符串" class="headerlink" title="数组转字符串，元素拼接成字符串"></a>数组转字符串，元素拼接成字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组转字符串，元素拼接成字符串</span></span><br><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(elements.join());  <span class="comment">//&quot;Fire,Air,Water&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//&quot;FireAirWater&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">//&quot;Fire-Air-Water&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组倒置与排序"><a href="#数组倒置与排序" class="headerlink" title="数组倒置与排序"></a>数组倒置与排序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组倒置</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.reverse()) <span class="comment">//[&quot;3&quot;, &quot;2&quot;, &quot;1&quot;]</span></span><br><span class="line"><span class="comment">//数组排序方法1</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">//数组排序方法2</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]; </span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line"><span class="built_in">console</span>.log(numbers);  <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line">array1= [];</span><br><span class="line"><span class="comment">//方法2 </span></span><br><span class="line">array2.splice(<span class="number">0</span>,array2.length);  </span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line">array3.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript Array</tag>
      </tags>
  </entry>
  <entry>
    <title>List去重</title>
    <url>/2021/01/17/list%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="List去重总结"><a href="#List去重总结" class="headerlink" title="List去重总结"></a>List去重总结</h1><h2 id="List和Set区别"><a href="#List和Set区别" class="headerlink" title="List和Set区别"></a>List和Set区别</h2><p>Java中的集合分三大类，分别是Set（集），List（列表）以及Map（映射）</p>
<ul>
<li><p>1、List和Set都是接口继承于Collection接口。</p>
</li>
<li><p>2、List有序可重复的。而Set无序不可重复的</p>
</li>
<li><p>3、List接口的三个实现类：LinkedList，ArrayList，Vector ，Set接口的两个实现类：HashSet，LinkedHashSet</p>
</li>
<li><p>4、List适合经常追加数据，插入，删除数据。但随机取数效率比较低。</p>
</li>
<li><p>5、Set适合经常地随机储存，插入，删除。但是在遍历时效率比较低。 </p>
<h2 id="去重方法"><a href="#去重方法" class="headerlink" title="去重方法"></a>去重方法</h2></li>
<li><p>1、运用Set无序不重复特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;(list1.size());  </span><br><span class="line">List&lt;Integer&gt; newlist= <span class="keyword">new</span> ArrayList&lt;Integer&gt;(list1.size());  </span><br><span class="line"><span class="keyword">for</span> (Integer it : list1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (set.add(it)) &#123;   <span class="comment">//运用Set无序不可重复特点来判断</span></span><br><span class="line">        newlist.add(it);  <span class="comment">//把不重复的数据添加到新的newlist</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">list1.clear();   <span class="comment">//循环后把原list1清空</span></span><br><span class="line">list1.addAll(newlist);  <span class="comment">//再把新的newlist全部加到list1中去，得到去重后的list1</span></span><br><span class="line">System.out.println(list1);  <span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
<li><p>2、list转set自动去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list2转set的时候去重,set再转newlist2</span></span><br><span class="line">LinkedList&lt;Integer&gt; list2= <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">LinkedHashSet&lt;Integer&gt; lhset= <span class="keyword">new</span> LinkedHashSet&lt;&gt;(list2);</span><br><span class="line"></span><br><span class="line">LinkedList&lt;Integer&gt; newlist2= <span class="keyword">new</span> LinkedList&lt;&gt;(lhset);</span><br><span class="line"></span><br><span class="line">System.out.println(newlist2);<span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
<li><p>3、遍历list3，用contains判断有重复的就不存放到newlist3中去。循环结束后把list3清空，再把newlist3全部放进去，得到去重后的list3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line">LinkedList&lt;Integer&gt; list3= <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">LinkedList&lt;Integer&gt; newlist3=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list3.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!newlist3.contains(list3.get(i)))&#123;</span><br><span class="line">        newlist3.add(list3.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">list3.clear();</span><br><span class="line">list3.addAll(newlist3);</span><br><span class="line">System.out.println(list3); <span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
<li><p>4、用Stream流的distinct方法去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> LinkedList&lt;Integer&gt; list4= <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line"> Stream&lt;Integer&gt; liststream= list4.stream().distinct();</span><br><span class="line"></span><br><span class="line"><span class="comment">// distinct.forEach(res-&gt; System.out.println(res));  //输出每一项    </span></span><br><span class="line"><span class="comment">//重复后的liststream转成newlist4</span></span><br><span class="line">List&lt;Integer&gt; newlist4= liststream.collect(Collectors.toList());  </span><br><span class="line"> System.out.println(newlist4);<span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
<li><p>5、如果List中存放的是Entity类对象，要根据某个字段去重，可考虑TreeSet去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    ......       <span class="comment">//省略get、set、构造等一系列方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="number">20</span>, <span class="number">91</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="number">20</span>, <span class="number">90</span>), </span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小黑&quot;</span>, <span class="number">19</span>, <span class="number">60</span>), </span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小白&quot;</span>, <span class="number">22</span>, <span class="number">89</span>)</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//定义一个Student类的TreeSet,根据Name字段比较去重的比较器</span></span><br><span class="line">TreeSet&lt;Student&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(Student::getName)); </span><br><span class="line"><span class="comment">//Students实体类对象students添加到TreeSet中去进行比较</span></span><br><span class="line">treeSet.addAll(students);</span><br><span class="line"><span class="comment">//TreeSet再转换成List</span></span><br><span class="line">List&lt;Student&gt; resList= treeSet.stream().collect(Collectors.toList());</span><br><span class="line">System.out.println(resList);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="就着Stream-顺便记录一下排序"><a href="#就着Stream-顺便记录一下排序" class="headerlink" title="就着Stream,顺便记录一下排序"></a>就着Stream,顺便记录一下排序</h3><ul>
<li>java8新特性了解一下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    ......       <span class="comment">//省略get、set、构造等一系列方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="number">20</span>, <span class="number">91</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="number">20</span>, <span class="number">90</span>), </span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小黑&quot;</span>, <span class="number">19</span>, <span class="number">60</span>), </span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;小白&quot;</span>, <span class="number">22</span>, <span class="number">89</span>)</span><br><span class="line">        );</span><br><span class="line"> <span class="comment">//students对象转流后进行sorted排序，根据Age字段排序，limit取前两条。</span></span><br><span class="line">Stream&lt;Student&gt; sortedStream = students.stream().sorted((item2, item1) -&gt; item1.getAge() - item2.getAge()).limit(<span class="number">2</span>);</span><br><span class="line">List&lt;Student&gt; newList= sortedStream.collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>List 集合</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring实现Aop切面编程(日志记录)</title>
    <url>/2021/03/07/spring%E5%AE%9E%E7%8E%B0%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Spring两大特性"><a href="#Spring两大特性" class="headerlink" title="Spring两大特性"></a>Spring两大特性</h1><ul>
<li>IOC(控制反转)<blockquote>
<p>IOC：通俗点来讲，就是把对象的创建交给Spring容器来管理，不用我们手动new</p>
</blockquote>
</li>
<li>AOP(面向切面编程)<blockquote>
<p>AOP：定义一个切面，在切面中执行特定代码，实现代码增强，常用于日志打印，异常处理，性能耗时计算，事务处理，安全验证等等，</p>
</blockquote>
<h1 id="用AOP和不用AOP做日志记录的区别"><a href="#用AOP和不用AOP做日志记录的区别" class="headerlink" title="用AOP和不用AOP做日志记录的区别"></a>用AOP和不用AOP做日志记录的区别</h1></li>
<li>不用AOP:<blockquote>
<p>每个方法都要写记录日志的代码，代码多，工作量大</p>
</blockquote>
</li>
<li>使用AOP:<blockquote>
<p>日志统一交给某个类(切面配置类)来记录，这样做的好处是业务代码简洁了，也能达到一定的解耦等等</p>
</blockquote>
</li>
</ul>
<h1 id="AOP实战之旅-基于注解"><a href="#AOP实战之旅-基于注解" class="headerlink" title="AOP实战之旅(基于注解)"></a>AOP实战之旅(基于注解)</h1><ul>
<li>实战环境：jdk8、SpringBoot2.4.3、maven3.6。</li>
<li>@Pointcut: </li>
<li>@Before: 切面方法执行之前执行</li>
<li>@After: 切面方法执行之后执行 。</li>
<li>@AfterRunning: 切面方法成功返回结果之后执行</li>
<li>@AfterThrowing: 切面方法抛出异常后执行<h2 id="1、SpringBoot项目搭建，并加入AOP依赖"><a href="#1、SpringBoot项目搭建，并加入AOP依赖" class="headerlink" title="1、SpringBoot项目搭建，并加入AOP依赖"></a>1、SpringBoot项目搭建，并<font color="red"><strong>加入AOP依赖</strong></font></h2></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、创建切面类SystemLogAspect"><a href="#2、创建切面类SystemLogAspect" class="headerlink" title="2、创建切面类SystemLogAspect"></a>2、创建切面类SystemLogAspect</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//标识为一个切面类</span></span><br><span class="line"><span class="meta">@Component</span>   <span class="comment">//交给Spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Pointcut(&quot;@annotation(com.demo.aop.joggle.SystemLogInterface)&quot;)  //应用在有@SystemLogInterface注解的方法上</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">controllerAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;我是切点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;controllerAspect()&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程绑定变量（该数据只有当前请求的线程可见）</span></span><br><span class="line">    Date beginTime = <span class="keyword">new</span> Date();</span><br><span class="line">    System.out.println(<span class="string">&quot;方法执行前通知&quot;</span>);</span><br><span class="line">    <span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@AfterReturning(&quot;controllerAspect()&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;方法返回结果后执行&quot;</span>);</span><br><span class="line">    <span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@AfterThrowing(&quot;controllerAspect()&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrow</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;方法发生异常后执行&quot;</span>);</span><br><span class="line">    <span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、创建自定义注解SystemLogInterface"><a href="#3、创建自定义注解SystemLogInterface" class="headerlink" title="3、创建自定义注解SystemLogInterface"></a>3、创建自定义注解SystemLogInterface</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:切面注解</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span>: Mosey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2021/3/6 14:50</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span><span class="comment">//作用于参数或方法上 </span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLogInterface &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、创建TestController，并在test方法处使用自定义的SystemLogInterface注解"><a href="#4、创建TestController，并在test方法处使用自定义的SystemLogInterface注解" class="headerlink" title="4、创建TestController，并在test方法处使用自定义的SystemLogInterface注解"></a>4、创建TestController，并在test方法处使用自定义的SystemLogInterface注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="meta">@RestController</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SystemLogInterface</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/aop&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">      System.out.println(<span class="string">&quot;方法正在执行中。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;访问成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、运行项目。访问localhost-8080-test-aop会打印出下面的结果"><a href="#5、运行项目。访问localhost-8080-test-aop会打印出下面的结果" class="headerlink" title="5、运行项目。访问localhost:8080/test/aop会打印出下面的结果"></a>5、运行项目。访问localhost:8080/test/aop会打印出下面的结果</h2><blockquote>
<p>方法执行前通知<br>    方法正在执行中。。。<br>    方法返回结果后执行</p>
</blockquote>
<p>ＰＳ：如果方法运行时发生异常，会进入到@AfterThrowing中，如果我们有在test()方法中捕获异常，则不会进入@AfterThrowing。</p>
<h1 id="AOP实战之旅-不基于注解"><a href="#AOP实战之旅-不基于注解" class="headerlink" title="AOP实战之旅(不基于注解)"></a>AOP实战之旅(不基于注解)</h1><ul>
<li>上面的切面类SystemLogAspect的切点用到的是@Pointcut(“@annotation(com.demo.aop.joggle.SystemLogInterface)”)基于注解实现AOP的。</li>
<li>其实我们也可以用@Pointcut(“execution(* com.demo.aop.controller..test())”)来进行切点。</li>
<li>execution(* com.demo.aop.controller..test())意思是：com.demo.aop.controller包下的所有类的test方法(),括号里边的..表示任何参数。</li>
<li>PS:切点换成execution表达式后，要把controller层的@SystemLogInterface注解注释掉。</li>
<li>运行结果和上面的一样<blockquote>
<p>方法执行前通知<br>  方法正在执行中。。。<br>  方法返回结果后执行</p>
</blockquote>
<h2 id="execution表达式"><a href="#execution表达式" class="headerlink" title="execution表达式"></a>execution表达式</h2>更多有关于execution表达式的，可以看下面的截图，execution也可以用连接符&amp;&amp; || 和!等匹配多个表达式，具体问题具体分析<br><a href="https://imgtu.com/i/617yvT"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/03/09/617yvT.png" alt="617yvT.png"></a></li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Aop</tag>
      </tags>
  </entry>
  <entry>
    <title>postgres数据库备份和还原命令-亲测有效</title>
    <url>/2020/07/08/postgres%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F%E5%91%BD%E4%BB%A4-%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="cmd命令备份本地postgres数据库以及还原"><a href="#cmd命令备份本地postgres数据库以及还原" class="headerlink" title="cmd命令备份本地postgres数据库以及还原"></a>cmd命令备份本地postgres数据库以及还原</h2><p>ps:<br>1、postgres数据库的备份和还原，前提是都要进来pgadmin安装目录的bin文件夹<br>2、备份后的文件格式是.bak(其它格式我没有测试过)<br>3、本命令备份后，也只能用命令的方式还原，其它还原方式测试没有通过。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200708160233915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>备份命令：pg_dump -h localhost -p 5432 -U postgres -d crcslocalhost&gt; D:\testbackup.bak<br>口令为你的数据库密码，回车。备份成功。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200708160708497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还原命令：psql -h localhost -p 5432 -U postgres -d test02 -f “D:\testbackup.bak”<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200708161459480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结语：如果有什么错误和不当之处，麻烦指出。感谢x3！</p>
]]></content>
      <categories>
        <category>数据库 postgres</category>
      </categories>
      <tags>
        <tag>postgresql 运维</tag>
      </tags>
  </entry>
  <entry>
    <title>vue element子组件中调用父组件数据</title>
    <url>/2020/07/03/vue%20element%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%B0%83%E7%94%A8%E7%88%B6%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="vue-element子组件中调用父组件数据"><a href="#vue-element子组件中调用父组件数据" class="headerlink" title="vue element子组件中调用父组件数据"></a>vue element子组件中调用父组件数据</h2><p>看图吧。我是一个沉默寡言的代码编辑者。图中描述的应该算是比较详细的了。<br>图一：一个是小头爸爸，一个是大头儿子<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913278.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图一：一个是小头爸爸，一个是大头儿子"><br>图二：爸爸给儿子取了一个好听的名字叫‘my-economy-info’<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913253.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图二：爸爸给儿子取了一个好听的名字叫‘my-economy-info’"><br>图三：爸爸给儿子穿了两件衣服，data和task,(俗称绑定数据)<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913240.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图三：爸爸给儿子穿了两件衣服，data和task,(俗称绑定数据)"><br>图四：儿子用props接收来自爸爸的爱意data和task,其中，casedata这件衣服没有作用，里面没有数据，因为爸爸没有给它。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200703161913195.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNjkyMDIx,size_16,color_FFFFFF,t_70" alt="图四：儿子用props接收来自爸爸的爱意data和task,其中，casedata这件衣服没有作用，里面没有数据，因为爸爸没有给它。"><br>好了，完成。拿到数据你就可以随便用了。</p>
]]></content>
      <categories>
        <category>子组件调用父组件数据 父子组件之前通信</category>
      </categories>
      <tags>
        <tag>vue javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端js排序</title>
    <url>/2020/07/13/%E5%89%8D%E7%AB%AFjs%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="前端在js中排序数据"><a href="#前端在js中排序数据" class="headerlink" title="前端在js中排序数据"></a>前端在js中排序数据</h2><p>和后端排序类似，this.sortdata为你要降序处理的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.sortdata.sort(function (a,b) &#123;</span><br><span class="line">                return a.value-b.value;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<p> 如果要升序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.sortdata.sort(function (a,b) &#123;</span><br><span class="line">               return b.value-a.value;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>

<p>注：a.value中的value为sortdate中的值。即你要根据sortdata中的value值来排序。如果sortdata中你要根据其它值来排序(如：年龄、分数、数量等等)，则自行替换</p>
]]></content>
      <categories>
        <category>排序 前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端样式篇</title>
    <url>/2020/09/24/%E5%89%8D%E7%AB%AF%E4%B8%80%E4%BA%9B%E6%A0%B7%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="前端一些样式记录"><a href="#前端一些样式记录" class="headerlink" title="前端一些样式记录"></a>前端一些样式记录</h1><p>由于工作中除了后端开发，有时候还会要做前端的工作。所以记录一下，有空的时候回看一下也好。</p>
<h2 id="view的内容居中样式-div"><a href="#view的内容居中样式-div" class="headerlink" title="view的内容居中样式(div)"></a>view的内容居中样式(div)</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure>
<h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>:bold;</span><br></pre></td></tr></table></figure>
<h2 id="按钮圆角、变圆"><a href="#按钮圆角、变圆" class="headerlink" title="按钮圆角、变圆"></a>按钮圆角、变圆</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">15px</span>;</span><br></pre></td></tr></table></figure>
<h2 id="更换按钮背景色为红色"><a href="#更换按钮背景色为红色" class="headerlink" title="更换按钮背景色为红色"></a>更换按钮背景色为红色</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="number">#FF0000</span>;   <span class="comment">//背景色</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffffff</span>;		<span class="comment">//可理解为按钮上文字的颜色</span></span><br></pre></td></tr></table></figure>
<h2 id="背景透明"><a href="#背景透明" class="headerlink" title="背景透明"></a>背景透明</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:transparent;</span><br></pre></td></tr></table></figure>
<h2 id="背景图片采用渐变色"><a href="#背景图片采用渐变色" class="headerlink" title="背景图片采用渐变色"></a>背景图片采用渐变色</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//百分比调整两个颜色区域占比，90deg代表渐变轴为90度</span></span><br><span class="line"><span class="attribute">background-image</span>: linear-gradient(<span class="number">90deg</span>,<span class="number">#ca5924</span> <span class="number">10%</span>,<span class="number">#ffff00</span> <span class="number">90%</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>以下实例演示了从头部开始(自上而下)的线性渐变，从红色开始，转为黄色，再到蓝色:<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:  linear-gradient(red, yellow, blue); </span><br></pre></td></tr></table></figure></li>
<li><a href="https://www.runoob.com/cssref/pr-background-image.html">菜鸟教程</a>上图文教程很生动，可以去看下。<h2 id="在父组件中改变子组件的样式"><a href="#在父组件中改变子组件的样式" class="headerlink" title="在父组件中改变子组件的样式"></a>在父组件中改变子组件的样式</h2></li>
<li>在vue中引入了作用域，其中scoped规定css样式只在本页面中生效，不会影响其它页面<figure class="highlight xhtml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>由于scoped作用域是影响，如果要临时改变子组件的样式，可以用/deep/来实现scoped穿透，例子：<br>PS：input-value-border是子组件中的class样式名，而不是组件名。<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">/deep/ .input-value-border&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff0000</span>  //这里写你要改的样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="层叠元素置顶-置于最前-，防止点击不到"><a href="#层叠元素置顶-置于最前-，防止点击不到" class="headerlink" title="层叠元素置顶(置于最前)，防止点击不到"></a>层叠元素置顶(置于最前)，防止点击不到</h2></li>
<li>z-index 属性指定一个元素的堆叠顺序。<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;  </span><br></pre></td></tr></table></figure>
<h2 id="设置元素的四个边距"><a href="#设置元素的四个边距" class="headerlink" title="设置元素的四个边距"></a>设置元素的四个边距</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">2px</span> <span class="number">4px</span> <span class="number">3px</span> <span class="number">4px</span>;  <span class="comment">/*分别是上、右、下、左边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">10cm</span>;   <span class="comment">/*如果只有一个值，代表4个边距都是10cm*/</span></span><br></pre></td></tr></table></figure>
<h2 id="为段落设置字体"><a href="#为段落设置字体" class="headerlink" title="为段落设置字体"></a>为段落设置字体</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>:<span class="string">&quot;Microsoft YaHei&quot;</span>；/*微软雅黑字体*/</span><br></pre></td></tr></table></figure>
<h2 id="鼠标移动到元素上样式"><a href="#鼠标移动到元素上样式" class="headerlink" title="鼠标移动到元素上样式"></a>鼠标移动到元素上样式</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:hover</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:yellow;  <span class="comment">/*span标签背景色变红*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>多数据源配置</title>
    <url>/2020/09/01/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="SSM项目配置多数据源"><a href="#SSM项目配置多数据源" class="headerlink" title="SSM项目配置多数据源"></a>SSM项目配置多数据源</h1><ul>
<li>在spring-mybatis.xml中配置两个bean，jdbc.properties文件配置两个数据库连接<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源1  primary=&quot;true&quot;代表主数据源，默认数据源，--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>   //这里是配置数据库url</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span> //这里是配置数据库username</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span> //这里是配置数据库password</span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>   //其它的property</span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span> //其它的property</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源2  primary=&quot;true&quot;代表次数据源，切换数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;aicScrDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>   //这里是配置数据库url</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span>  //这里是配置数据库username</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span>  //这里是配置数据库password</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span> //其它的property</span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>  //其它的property</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><ul>
<li>再配置两个sqlSessionFactory和数据源对应。primary也要相对应<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>   //第一个数据源指定对应的第一个数据源对应的Mapper.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>   //第二个数据源指定对应的第二个数据源对应的Mapper.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MapperScan扫描配置  primary也要相对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>    //配置对应的数据源1的mapper层</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span>   //配置对应的数据源2的mapper层</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> 省略<span class="attr">.......</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>只要修改两个文件，就能启动项目了。</li>
<li>数据源配置好了，新建的实体类就会对应相关的数据源了，就能开心的CRUD了。<h1 id="SpringBoot项目配置多数据源"><a href="#SpringBoot项目配置多数据源" class="headerlink" title="SpringBoot项目配置多数据源"></a>SpringBoot项目配置多数据源</h1></li>
<li>springboot项目可以参考<a href="https://baomidou.com/guide/dynamic-datasource.html">官网demo</a>中的简便方法，有demo，容易上手(<font color="red">其实是不想码字</font>)。</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>我用命令创建的第一篇博客</title>
    <url>/2020/09/03/%E6%88%91%E7%94%A8%E5%91%BD%E4%BB%A4%E5%88%9B%E5%BB%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="记录和学习MarkDown语法"><a href="#记录和学习MarkDown语法" class="headerlink" title="记录和学习MarkDown语法"></a>记录和学习MarkDown语法</h1><h2 id="上面的是一级标题。本标题是二级标题"><a href="#上面的是一级标题。本标题是二级标题" class="headerlink" title="上面的是一级标题。本标题是二级标题"></a>上面的是一级标题。本标题是二级标题</h2><h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><h4 id="我是四级标题"><a href="#我是四级标题" class="headerlink" title="我是四级标题"></a>我是四级标题</h4><h5 id="我是五级标题"><a href="#我是五级标题" class="headerlink" title="我是五级标题"></a>我是五级标题</h5><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br>一个井号加空格，表示一级标题，两个井号代表二级标题。依此类推</p>
<p>要加粗的文字左右分别用两个*号包起来，比如：<strong>我是加粗的</strong></p>
<p>要倾斜的文字左右分别用一个星号包起来 比如：<em>我怎么倾斜了</em></p>
<p>要加删除线文字，左右分别加两个波浪线，比如：<del>这是加删除线的文字</del></p>
<p>三个或者三个以上的 - 或者 * 都可以是分割线<br>分割线</p>
<hr>
<!--<img src= "/img/loading.gif" data-lazy-src="/2020/09/03/%E6%88%91%E7%94%A8%E5%91%BD%E4%BB%A4%E5%88%9B%E5%BB%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Mosey.jpg" class="" title="作者镇楼">-->

<p><strong>中括号里写超链接百度，后面跟的括号里边写url.如下</strong><br><a href="http://baidu.com/">百度</a></p>
<p><code>  技术这个东西。只能自己慢慢摸索</code></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>List</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>小撸redis</title>
    <url>/2021/02/21/%E6%92%B8%E4%BA%86%E5%A5%BD%E4%B9%85%E7%9A%84redis/</url>
    <content><![CDATA[<h1 id="redis还是要会的"><a href="#redis还是要会的" class="headerlink" title="redis还是要会的"></a>redis还是要会的</h1><h2 id="redis是什么"><a href="#redis是什么" class="headerlink" title="redis是什么"></a>redis是什么</h2><ul>
<li>redis是一个高性能的非关系型数据库，相对于普通的关系型数据库，redis的数据储存在缓存中，<br>  读(110000次/s)写(81000次/s )数据非常快，Redis也支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。<h2 id="redis数据类型了解一下"><a href="#redis数据类型了解一下" class="headerlink" title="redis数据类型了解一下"></a>redis数据类型了解一下</h2></li>
<li>String: 字符串</li>
<li>Hash: 散列</li>
<li>List: 列表</li>
<li>Set: 集合</li>
<li>Sorted Set: 有序集合<h2 id="redis的安装和简单使用-windows环境下"><a href="#redis的安装和简单使用-windows环境下" class="headerlink" title="redis的安装和简单使用(windows环境下)"></a>redis的安装和简单使用(windows环境下)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></li>
</ul>
<ol>
<li>下载地址：<a href="https://github.com/tporadowski/redis/releases%E3%80%82">https://github.com/tporadowski/redis/releases。</a></li>
<li>下载 Redis-x64-xxx.zip压缩包并解压到D:\redis<h3 id="启动（两种方式）"><a href="#启动（两种方式）" class="headerlink" title="启动（两种方式）"></a>启动（两种方式）</h3></li>
</ol>
<ul>
<li>启动方法有cmd命令启动和exe文件启动。其实他们都一样，命令只是暗地里操作exe文件启动而已。</li>
<li>启动成功标志，出现6379<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4></li>
<li>因没有配置redis的环境变量，所以使用cmd命令启动时要注意切换到redis的安装目录(解压目录)D:\redis,</li>
<li>输入redis-server.exe redis.windows.conf回车，会生成一个窗口，注意不要关闭这个服务端窗口。<br><a href="https://imgchr.com/i/yqOlvV"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqOlvV.png" alt="yqOlvV.png"></a></li>
<li>然后再重新打开一个cmd窗口，输入redis-cli.exe -h 127.0.0.1 -p 6379，用于打开redis客户端，可查看redis相关信息和命令练习<br><a href="https://imgchr.com/i/yqOsbD"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqOsbD.png" alt="yqOsbD.png"></a><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4></li>
<li>exe文件启动，按照下图顺序启动服务端和客户端<br><a href="https://imgchr.com/i/yqLSS0"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqLSS0.png" alt="yqLSS0.png"></a></li>
</ul>
<h2 id="redis常用命令学习总结"><a href="#redis常用命令学习总结" class="headerlink" title="redis常用命令学习总结"></a>redis常用命令学习总结</h2><ul>
<li>redis共有16个库，顺序从下标0开始。默认是第一个库，如要切换库，则要使用命令select index    例如：select 1代表切换到第二个库。</li>
<li>查看库中所有的键：    keys * </li>
<li>命令太多要清屏：   clear <h3 id="老老实实做一个redis练习生"><a href="#老老实实做一个redis练习生" class="headerlink" title="老老实实做一个redis练习生"></a>老老实实做一个redis练习生</h3>会唱、跳、rap、篮球还不够，还要会redis基础命令，下面是每个类型相关。<h4 id="String相关"><a href="#String相关" class="headerlink" title="String相关"></a>String相关</h4><a href="https://imgchr.com/i/yqv0vq"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqv0vq.png" alt="yqv0vq.png"></a><br><a href="https://imgchr.com/i/yqvrrV"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqvrrV.png" alt="yqvrrV.png"></a><h4 id="Hash相关"><a href="#Hash相关" class="headerlink" title="Hash相关"></a>Hash相关</h4><a href="https://imgchr.com/i/yqvhx1"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqvhx1.png" alt="yqvhx1.png"></a><h4 id="List相关"><a href="#List相关" class="headerlink" title="List相关"></a>List相关</h4><a href="https://imgchr.com/i/yqvbIe"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqvbIe.png" alt="yqvbIe.png"></a><h4 id="Set相关"><a href="#Set相关" class="headerlink" title="Set相关"></a>Set相关</h4><a href="https://imgchr.com/i/yqvXRA"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/02/23/yqvXRA.png" alt="yqvXRA.png"></a><h4 id="Sorted-Set相关"><a href="#Sorted-Set相关" class="headerlink" title="Sorted Set相关"></a>Sorted Set相关</h4>偷一下懒，移步去看<a href="https://www.runoob.com/redis/redis-sorted-sets.html">菜鸟教程对应版块</a><h2 id="redis的几个特性理解"><a href="#redis的几个特性理解" class="headerlink" title="redis的几个特性理解"></a>redis的几个特性理解</h2></li>
</ul>
<ol>
<li>缓存穿透 、   <ul>
<li>是指当Redis缓存中的key不存在value值时，就会请求到后台去查询数据库，如果并发量很高，就会造成数据库宕机</li>
<li>解决办法：法1：查到空数据也进行缓存，但要求设置很短的过期时间，一般为几分钟。法二：布隆过滤器</li>
</ul>
</li>
<li>缓存击穿<ul>
<li>是指Redis缓存中的key存在value值，但是过期了，该请求还是会去后台请求查询数据库，如果并发量很高同时查询同一条数据，也会造成数据库宕机。</li>
<li>解决办法：法一：直接设为永不过期就。法二：加互斥锁</li>
</ul>
</li>
<li>缓存雪崩 、<ul>
<li>是指多条或者无数条数据过期了，造成系统崩溃（例如：热点商品秒杀）</li>
<li>解决办法：<ul>
<li>法一：直接设为永不过期就。</li>
<li>法二：随机过期(过期一部分，目的防止同一时间大量数据过期现象发生。)<h2 id="Redis持久化的rdb方式和aof方式备份的区别"><a href="#Redis持久化的rdb方式和aof方式备份的区别" class="headerlink" title="Redis持久化的rdb方式和aof方式备份的区别"></a>Redis持久化的rdb方式和aof方式备份的区别</h2></li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>RDB每隔一段时间进行备份，AOF每时每刻在写操作时进行备份，所以AOF备份出来的文件比RDB的要大，数据完整性也比RDB的要好。不过官方建议同时开启这两种持久化</p>
</li>
<li><p>Redis 默认的持久化方式是 RDB ，并且默认是打开的</p>
</li>
<li><p>在配置文件中满足这些条件就会触发RDB备份操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li>
<li><p>如果要开启AOF备份，则要在配置文件中把 appendonly 改为 yes开启</p>
</li>
<li><p>AOF备份有三种方式，在配置文件中选择其中一种即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># appendfsync always       &#x2F;&#x2F;实时，每个操作都会备份(IO开销大)    </span><br><span class="line">appendfsync everysec      &#x2F;&#x2F;每秒，redis宕机会丢失一秒的数据(建议使用)</span><br><span class="line"># appendfsync no	          </span><br></pre></td></tr></table></figure>
<h2 id="Redis数据恢复"><a href="#Redis数据恢复" class="headerlink" title="Redis数据恢复"></a>Redis数据恢复</h2></li>
<li><p>如果有AOF文件,优先恢复AOF，没有则恢复RDB文件</p>
<h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h3 id="集群定义"><a href="#集群定义" class="headerlink" title="集群定义"></a>集群定义</h3></li>
<li><p>所谓的集群，就是通过添加多个相同的服务器，防止某台服务器发生事故，导致系统不能正常运行，从而让服务器达到一个稳定、高效的状态。</p>
<ul>
<li>主从复制、<ul>
<li>主库可读、可写。从库只读不写，所以可以把查询统统交给从库，增删改就交给主库。</li>
<li>ps：Master主库有且仅有一个，建议从库最少设置两个</li>
</ul>
</li>
<li>哨兵模式、<ul>
<li>因为主从复制集群有一个致命的缺点，那就是主库发生故障，就不能进行增删改了，所以就产生了哨兵模式，<ul>
<li>所谓的哨兵模式，就是当主库发生故障后，哨兵会在所有的从库中，自动选举一个新的库作为主库来进行增删改操作。<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/qq_42815754/article/details/82912130">手把手教程</a></p>
<h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3></li>
<li><p>相关命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">multi               <span class="comment">//开启事务</span></span><br><span class="line">set .......        <span class="comment">//数据库操作入队</span></span><br><span class="line">exec/discard      <span class="comment">//执行或取消队列</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>PS:Redis不支持事务回滚，队列中的某一个操作失败，其它的剩余操作照样执行，因为Redis认为这种错误应该发生在开发环境中，不应该出现在正式环境中，Redis并不帮程序员解决他造成的错误</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
